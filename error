//Comments.index.js

import {Component} from 'react'
import {v4 as uuidv4} from 'uuid'
import CommentItem from '../CommentItem'
import './index.css'

const initialContainerBackgroundClassNames = [
  'amber',
  'blue',
  'orange',
  'emerald',
  'teal',
  'red',
  'light-blue',
]

const basicUserDetails = [
  {
    name: '',
    comment: '',
    id: uuidv4(),
    isLiked: false,
  },
]

class Comments extends Component {
  state = {
    commentsList: basicUserDetails,
    name: '',
    comment: '',
    count: 0,
  }

  updateNameToState = event => {
    this.setState({name: event.target.value})
  }

  updateTextAreaToState = event => {
    this.setState({comment: event.target.value})
  }

  onSubmit = event => {
    event.preventDefault()
    const {name, comment} = this.state

    if (name !== '' && comment !== '') {
      const newComment = {
        id: uuidv4(),
        name,
        comment,
        isLiked: false,
      }

      this.setState(prevState => ({
        commentsList: [...prevState.commentsList, newComment],
        count: prevState.count + 1,
        name: '',
        comment: '',
      }))
    }
    return null
  }

  test = () => {
    const {commentsList} = this.state

    if (commentsList.length > 1) {
      return true
    }
    return false
  }

  toggleLikeStatus = id => {
    this.setState(prevState => ({
      commentsList: prevState.commentsList.map(eachComment => {
        if (id === eachComment.id) {
          return {...eachComment, isLiked: !eachComment.isLiked}
        }
        return eachComment
      }),
    }))
  }

  toggleLikeButton = id => {
    this.setState(prevState => ({
      commentsList: prevState.commentsList.map(each => {
        if (id === each.id) {
          return {...each, isLiked: !each.isLiked}
        }
        return each
      }),
    }))
  }

  deleteComment = id => {
    const {commentsList} = this.state

    const filteredComments = commentsList.filter(
      eachComment => eachComment.id !== id,
    )

    this.setState({commentsList: filteredComments})

    this.setState(prevState => ({count: prevState.count - 1}))
  }

  render() {
    const {commentsList, count, name, comment} = this.state

    const slicedCommentsList = commentsList.slice(1)

    return (
      <div className="comments-container">
        <h1 className="comments-heading">Comments</h1>
        <div className="upper-section">
          <div className="content-card">
            <p className="comments-para">
              Say something about 4.0 Technologies
            </p>
            <form className="comments-form">
              <input
                type="text"
                placeholder="Your Name"
                className="name-input"
                onChange={this.updateNameToState}
                value={name}
              />
              <br />
              <br />
              <textarea
                cols="30"
                rows="5"
                placeholder="Your Comment"
                className="name-input"
                onChange={this.updateTextAreaToState}
                value={comment}
              />
            </form>
            <button type="submit" className="btn" onClick={this.onSubmit}>
              Add Comment
            </button>
          </div>
          <div className="img">
            <img
              src="https://assets.ccbp.in/frontend/react-js/comments-app/comments-img.png"
              alt="comments"
              className="img-edits"
            />
          </div>
        </div>
        <hr className="line-ele" />
        <div className="lower-section">
          <span className="span-ele">{count}</span>
          <h1 className="heading1">Comments</h1>
        </div>
        <ul className="ul-ele">
          {slicedCommentsList.map(eachComment => (
            <CommentItem
              key={eachComment.id}
              commentsList={eachComment}
              toggleLikeStatus={this.toggleLikeStatus}
              toggleLikeButton={this.toggleLikeButton}
              deleteComment={this.deleteComment}
              initialContainerBackgroundClassNames={
                initialContainerBackgroundClassNames
              }
            />
          ))}
        </ul>
      </div>
    )
  }
}

export default Comments


-------------------------------------------------------------------------------------------------------------

//Comments.index.css



.comments-container {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  height: 100vh;
}

.comments-heading {
  font-family: 'Roboto';
  font-size: 50px;
  font-weight: 600;
  color: #1e293b;

  padding-top: 20px;
  width: 80vw;
}

.upper-section {
  width: 80vw;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
}

.content-card {
  margin-right: 30px;
  flex-grow: 1;
}

.comments-para {
  font-family: 'Roboto';
  font-size: 14px;
  font-weight: 600;
  color: #475569;
}

.comments-form {
}

.name-input {
  font-family: 'Roboto';
  font-size: 15px;
  font-weight: 00;
  color: #475569;
}

.btn {
  border-width: 0px;
  background-color: #0284c7;
  color: #ffffff;
  border-radius: 3px;
  height: 28px;
  cursor: pointer;
  outline: none;
  margin-top: 20px;
}
.img {
  flex-grow: 1;
  width: 80px;
}

.line-ele {
  width: 80%;
}

.heading1 {
  font-family: 'Roboto';
  font-size: 14px;
  font-weight: 600;
  color: #475569;
}
.span-ele {
  background-color: #0284c7;
  color: #ffffff;
  font-family: 'Roboto';

  text-align: center;
  padding-right: 10px;
  padding-left: 10px;
  margin-right: 10px;
  border-radius: 3px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.lower-section {
  width: 80vw;
  display: flex;
}

.ul-ele {
  padding-inline-start: 0px;

  width: 80vw;
}


-------------------------------------------------------------------------------------------------------


CommentItem index.js


import {formatDistanceToNow} from 'date-fns'
import './index.css'

const CommentItem = props => {
  const {
    commentsList,
    toggleLikeStatus,
    toggleLikeButton,
    deleteComment,
  } = props

  const {id, name, comment, isLiked} = commentsList

  const profile = name[0].toUpperCase()

  const liked =
    'https://assets.ccbp.in/frontend/react-js/comments-app/liked-img.png'
  const unliked =
    'https://assets.ccbp.in/frontend/react-js/comments-app/like-img.png'

  const img = isLiked ? liked : unliked

  const onLikedORDislike = () => {
    toggleLikeStatus(id)
  }
  const colorChange = isLiked ? 'blue' : 'like-para'

  const likeButton = () => {
    toggleLikeButton(id)
  }

  const onDelete = () => {
    deleteComment(id)
  }

  return (
    <li className="li-ele">
      <div className="align-round">
        <div>
          <div className="round">{profile}</div>
        </div>

        <div className="align-div">
          <div className="comment-card">
            <h1 className="heading2">{name}</h1>
            <p className="para5"> {formatDistanceToNow(new Date())}</p>
          </div>
          <p className="paragraph">{comment}</p>
        </div>
      </div>
      <div className="down-div">
        <img
          src={img}
          className="like-image"
          alt="like"
          onClick={onLikedORDislike}
        />
        <div className="like-delete-container">
          <div>
            <button className={colorChange} onClick={likeButton} type="button">
              Like
            </button>
          </div>

          <button
            className="delete-container"
            type="button"
            onClick={onDelete}
            testid="delete"
          >
            <img
              src="https://assets.ccbp.in/frontend/react-js/comments-app/delete-img.png"
              alt="delete"
            />
          </button>
        </div>
      </div>
    </li>
  )
}
export default CommentItem




CommentItem index.css

.amber {
  background-color: #f59e0b;
}

.blue {
  background-color: #0b69ff;
}

.orange {
  background-color: #f97316;
}

.emerald {
  background-color: #10b981;
}

.teal {
  background-color: #14b8a6;
}

.red {
  background-color: #b91c1c;
}

.light-blue {
  background-color: #0ea5e9;
}

.li-ele {
  list-style-type: none;
  border-bottom: solid 1px #7e858e;
}
.round {
  border-radius: 30px;
  background-color: #f59e0b;
  color: #ffffff;
  height: 40px;
  width: 40px;
  margin-right: 20px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  margin-top: 10px;
}

.align-div {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  flex-grow: 1;
}

.align-round {
  display: flex;

  justify-content: flex-start;
}

.comment-card {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: center;
}
.heading2 {
  font-family: 'Roboto';
  font-size: 20px;
  font-weight: 600;
  color: #1e293b;
  margin-right: 20px;
}

.paragraph {
  font-family: 'Roboto';
  font-size: 15px;
  font-weight: 500;
  color: #64748b;
  background: none;
  outline: none;
  flex-wrap: wrap;
}

.para5 {
  font-family: 'Roboto';
  font-size: 15px;
  font-weight: 400;

  color: #94a3b8;
}
.like-image {
  margin-right: 30px;
  height: 22px;
}

.down-div {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
}

.like-delete-container {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;

  flex-grow: 1;
}

.delete-container {
  cursor: pointer;
  outline: none;
  background: none;
  border-width: 0px;
}

.like-para {
  font-family: 'Roboto';
  font-size: 15px;
  font-weight: 600;
  cursor: pointer;
  outline: none;
  border-width: 0px;
  background: none;

  color: #7e858e;
}

.blue {
  color: #0ea5e9;
  font-family: 'Roboto';
  font-size: 15px;
  font-weight: 600;
  cursor: pointer;
  outline: none;
  border-width: 0px;
  background: none;
}
